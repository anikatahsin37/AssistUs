package com.example.fairuz.AssistUsApp.Activities;import android.Manifest;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.location.Location;import android.os.Build;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.design.widget.FloatingActionButton;import android.support.v4.app.ActivityCompat;import android.support.v4.app.FragmentActivity;import android.support.v4.content.ContextCompat;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.widget.ImageButton;import android.widget.PopupMenu;import android.widget.TextView;import android.widget.Toast;import com.example.fairuz.AssistUsApp.BackgroundServices.LocationAddService;import com.example.fairuz.AssistUsApp.R;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.Status;import com.google.android.gms.location.LocationListener;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.places.Place;import com.google.android.gms.location.places.ui.PlaceAutocompleteFragment;import com.google.android.gms.location.places.ui.PlaceSelectionListener;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.util.HashMap;import java.util.Map;import static com.example.fairuz.AssistUsApp.R.id.map;import static java.lang.Double.parseDouble;public class MapsActivity extends FragmentActivity implements OnMapReadyCallback,        GoogleApiClient.ConnectionCallbacks,        GoogleApiClient.OnConnectionFailedListener,        LocationListener, GoogleMap.OnMarkerClickListener,        GoogleMap.OnMarkerDragListener{    private GoogleMap mMap;    private GoogleApiClient client;    private LocationRequest locationRequest;    private FloatingActionButton m_add;    public static int TaskfirstFlag=0;    private Location lastLocation;    private Marker currentLocationMarker, searchedLocationMarker, addLocationMarker, marker;    public static final int REQUEST_LOCATION_CODE = 99;    int PROXIMITY_RADIUS = 10000;    private double latitude,longitude, latitude1, longitude1;    private String location;    private LatLng searched_location_latLng, current_location_latLng;    private MarkerOptions markerOptions;    private String TAG = "";    int p=1;    private DatabaseReference mLocationReference;    //firebase auth object    private FirebaseAuth firebaseAuth;    private Context mContext;    private TextView mTextView;    private double end_latitude, end_longitude;    int remove = 0;    Map<Marker, String> mMarkers = new HashMap<Marker, String>();    //view objects    int k=0;    protected void onStart()    {        super.onStart();        Intent LocationAddServiceIntent = new Intent(getApplicationContext(), LocationAddService.class);        startService(LocationAddServiceIntent);        if(searchedLocationMarker != null)            searchedLocationMarker.remove();        final String UserId = FirebaseAuth.getInstance().getCurrentUser().getUid();        mLocationReference = FirebaseDatabase.getInstance().getReference().child(UserId).child("AddedLocationLatlng");        LocationRead();    }    protected void markerRemove(Marker marker)    {        marker.remove();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_maps);        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)        {            checkLocationPermission();        }        // Obtain the SupportMapFragment and get notified when the map is ready to be used.        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()                .findFragmentById(map);        mapFragment.getMapAsync(this);        //autocomplete        PlaceAutocompleteFragment autocompleteFragment = (PlaceAutocompleteFragment)getFragmentManager().findFragmentById(R.id.place_autocomplete_fragment);        autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {            @Override            public void onPlaceSelected(Place place) {                //getting info about the selected place                location = place.getName().toString();                searched_location_latLng = place.getLatLng();                end_latitude = searched_location_latLng.latitude;                end_longitude = searched_location_latLng.longitude;                markerOptions = new MarkerOptions();                Toast.makeText(MapsActivity.this, "SEARCH", Toast.LENGTH_SHORT).show();                if(searchedLocationMarker != null)                {                    searchedLocationMarker.remove();                }                searchedLocationMarker = mMap.addMarker(markerOptions.position(searched_location_latLng).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA)).draggable(true));                mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(searched_location_latLng, 12));                markerOptions.position(new LatLng(end_latitude, end_longitude));            }            @Override            public void onError(Status status) {                //handles the error            }        });    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        switch (requestCode)        {            case REQUEST_LOCATION_CODE:                if(grantResults.length >0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)                {                    //permission is granted                    if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)                    {                        if(client == null)                        {                            buildGoogleApiClient();                        }                        mMap.setMyLocationEnabled(true);                    }                    else //permission is denied                    {                        Toast.makeText(this, "Permission Denied!!!", Toast.LENGTH_LONG).show();                    }                }        }    }    @Override    public void onMapReady(GoogleMap googleMap) {        mMap = googleMap;        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)        {            buildGoogleApiClient();            mMap.setMyLocationEnabled(true);        }        mMap.setOnMarkerClickListener(this);        mMap.setOnMarkerDragListener(this);    }    protected synchronized void buildGoogleApiClient()    {        client = new GoogleApiClient.Builder(this)                .addConnectionCallbacks(this)                .addOnConnectionFailedListener(this)                .addApi(LocationServices.API)                .build();        client.connect();    }    @Override    public void onLocationChanged(Location location) {        latitude = location.getLatitude();        longitude = location.getLongitude();        lastLocation = location;        if(currentLocationMarker != null)        {            currentLocationMarker.remove();        }        Log.d("lat = ",""+latitude);        current_location_latLng = new LatLng(location.getLatitude(),location.getLongitude());        MarkerOptions markerOptions = new MarkerOptions();        markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED));        markerOptions.position(current_location_latLng);        markerOptions.title("Current Location");        markerOptions.draggable(false);        currentLocationMarker = mMap.addMarker(markerOptions);        mMap.moveCamera(CameraUpdateFactory.newLatLng(current_location_latLng));        mMap.animateCamera(CameraUpdateFactory.zoomBy(10));        if(client != null)        {            LocationServices.FusedLocationApi.removeLocationUpdates( client, this);        }        //Toast.makeText(this, "MAP:"+current_location_latLng, Toast.LENGTH_SHORT).show();    }    public void onClick(View v)    {        if(searchedLocationMarker==null)        {            Toast.makeText(this, "No Location Added", Toast.LENGTH_SHORT).show();        }        else        {            addLocationMarker = mMap.addMarker(markerOptions                    .position(new LatLng(end_latitude, end_longitude)).title("Added Location")                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)).draggable(false));            LatLng added_location_latLng = new LatLng(end_latitude, end_longitude);            mLocationReference.push().setValue(added_location_latLng);        }    }    private void LocationRead()    {        final String uid = FirebaseAuth.getInstance().getCurrentUser().getUid();        final DatabaseReference ref = FirebaseDatabase.getInstance().getReference().child(uid).child("AddedLocationLatlng");        mLocationReference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(DataSnapshot dataSnapshot) {                int cnt=1;                try {                    for (final DataSnapshot postDataSnapshot : dataSnapshot.getChildren()) {                        if(postDataSnapshot.getValue()!=null)                        {                            String key = postDataSnapshot.getKey();                            final String latlng = postDataSnapshot.getValue().toString();                            String l[] = latlng.split(",");                            String l1[] = l[0].split("=");                            String l2[] = l[1].split("=");                            String lat = l1[1].substring(0,9);                            String lon = l2[1].substring(0,9);                            LatLng latLng_add = new LatLng(parseDouble(lat), parseDouble(lon));                            final MarkerOptions markerOptions = new MarkerOptions();                            markerOptions.position(latLng_add);                            markerOptions.title("");                            markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));                            marker = mMap.addMarker(markerOptions);                            mMarkers.put(marker, key);                            mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {                                @Override                                public boolean onMarkerClick(final Marker marker) {                                    if (marker.getPosition().equals(current_location_latLng)) {                                        Toast.makeText(MapsActivity.this, "Cannot be edited or deleted", Toast.LENGTH_SHORT).show();                                    }                                    else {                                        final ImageButton add_task_button = (ImageButton) findViewById(R.id.B_add_task);                                        add_task_button.setOnClickListener(new View.OnClickListener() {                                            @Override                                            public void onClick(final View view) {                                                final PopupMenu popupmenu = new PopupMenu(MapsActivity.this, add_task_button);                                                popupmenu.inflate(R.menu.option_menu);                                                popupmenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {                                                    @Override                                                    public boolean onMenuItemClick(MenuItem menuItem) {                                                        if (menuItem.getTitle().equals("Delete")) {                                                            marker.remove();                                                            String key=mMarkers.get(marker);                                                            FirebaseDatabase.getInstance().getReference().child(uid).child("AddedLocationLatlng").child(key).setValue(null);                                                            Toast.makeText(MapsActivity.this, "Marker Removed", Toast.LENGTH_SHORT).show();                                                        }                                                        else                                                        {                                                          //  Intent intent = new Intent(MapsActivity.this, LocationAddActivity.class);                                                           // startActivity(intent);                                                            Intent intent = new Intent(MapsActivity.this, LocationAddActivity.class);                                                            startActivity(intent);                                                        }                                                        return false;                                                    }                                                });                                                popupmenu.show();                                            }                                        });                                        add_task_button.setClickable(false);                                        Toast.makeText(MapsActivity.this, "Marker Pressed", Toast.LENGTH_SHORT).show();                                        add_task_button.setClickable(true);                                        add_task_button.performClick();                                        add_task_button.setClickable(false);                                        return false;                                    }                                    return true;                                }                            });                        }                    }                }                catch (Exception e){                }            }            @Override            public void onCancelled(DatabaseError databaseError) {            }        });    }    private String getUrl(double latitude , double longitude , String nearbyPlace)    {        StringBuilder googlePlaceUrl = new StringBuilder("https://maps.googleapis.com/maps/api/place/nearbysearch/json?");        googlePlaceUrl.append("location="+latitude+","+longitude);        googlePlaceUrl.append("&radius="+PROXIMITY_RADIUS);        googlePlaceUrl.append("&type="+nearbyPlace);        googlePlaceUrl.append("&sensor=true");        googlePlaceUrl.append("&key="+"AIzaSyAjKW0-ScmXeZsnErY_F_40RsC8EOwhjzU");        Log.d("MapsActivity", "url = "+googlePlaceUrl.toString());        return googlePlaceUrl.toString();    }    @Override    public void onConnected(@Nullable Bundle bundle) {        locationRequest = new LocationRequest();        locationRequest.setInterval(1000);        locationRequest.setFastestInterval(100);        locationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);        if(ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)        {            LocationServices.FusedLocationApi.requestLocationUpdates(client, locationRequest, this);        }    }    public boolean checkLocationPermission()    {        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED)        {            if(ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_FINE_LOCATION))            {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_CODE);            }            else            {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_CODE);            }            return false;        }        else            return true;    }    @Override    public void onConnectionSuspended(int i) {    }    @Override    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {    }    @Override    public boolean onMarkerClick(Marker marker) {        marker.setDraggable(true);        return false;    }    @Override    public void onMarkerDragStart(Marker marker) {    }    @Override    public void onMarkerDrag(Marker marker) {    }    @Override    public void onMarkerDragEnd(Marker marker) {        end_latitude = marker.getPosition().latitude;        end_longitude = marker.getPosition().longitude;    }}